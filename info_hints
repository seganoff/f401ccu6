"The best way to learn something is to do so empirically â€“ not taking anyone's
word on anything at all, but trying it out and experiencing it for yourself."
(Kaiwan N Billimoria, linux kernel programming first & second book edition)

lib/stm32/f4/rcc.c
const struct rcc_clock_scale rcc_hse_25mhz_3v3[RCC_CLOCK_3V3_END] = {
	{ /* 84MHz */
		.pllm = 25,
		.plln = 336,
		.pllp = 4,
		.pllq = 7,
		.pllr = 0,
		.pll_source = RCC_CFGR_PLLSRC_HSE_CLK,
		.hpre = RCC_CFGR_HPRE_NODIV,
		.ppre1 = RCC_CFGR_PPRE_DIV2,
		.ppre2 = RCC_CFGR_PPRE_NODIV,
		.voltage_scale = PWR_SCALE1,
		.flash_config = FLASH_ACR_DCEN | FLASH_ACR_ICEN |
				FLASH_ACR_LATENCY_2WS,
		.ahb_frequency  = 84000000,
		.apb1_frequency = 42000000,
		.apb2_frequency = 84000000,
	},

bluepill into st-link + blackmagic debug probe
https://microcontrollerelectronics.com/how-to-convert-an-stm32f103c8t6-into-a-black-magic-probe/
https://black-magic.org/hardware.html
make PROBE_HOST=hosted
stlink vs swlink
make PROBE_HOST=stlink BLUEPILL=1

https://slemi.info/2018/08/14/making-your-own-st-link-v2/
https://we.easyelectronics.ru/STM32/sozdaem-st-link-v2.html


https://black-magic.org/
https://github.com/blackmagic-debug/blackmagic

https://mecrisp-stellaris-folkdoc.sourceforge.io/projects/bluepill-stlink-programmer/README.html

https://microcontrollerelectronics.com/turn-an-stm32f103c8t6-blueplll-into-an-stlink-programmer/

flash via SWD
st-flash [--debug] write STLinkV2.J16.S4.bin 0x08000000 # debug is optional, spams output
100ohm between PB12 & PB14
connect via usb & check via dmesg -w & via st-info --probe
update to current version via cubeIDE
reconnect usb & check via dmesg -w & via st-info --probe

revert changes:
unplug usb & connect via SWD
turn off write protected sectors
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c "init" -c "halt" -c "stm32f1x unlock 0" -c "shutdown"
optionaly erase & flash some miniklink. st-flash --debug erase
